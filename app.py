{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7464f4a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5050/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [10/Jul/2025 23:07:54] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Jul/2025 23:07:54] \"GET /favicon.ico HTTP/1.1\" 404 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:08:06] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:08:15] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:08:24] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:08:34] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:09:37] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:10:12] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:10:19] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:10:24] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:10:29] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:10:35] \"POST / HTTP/1.1\" 200 -\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\oyuna\\anaconda3\\lib\\site-packages\\sklearn\\base.py:450: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "127.0.0.1 - - [10/Jul/2025 23:11:04] \"POST / HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, render_template, request, send_file\n",
    "import cv2\n",
    "import mediapipe as mp\n",
    "import joblib\n",
    "import numpy as np\n",
    "import os\n",
    "from werkzeug.utils import secure_filename\n",
    "\n",
    "# Setup\n",
    "app = Flask(__name__)\n",
    "UPLOAD_FOLDER = 'uploads'\n",
    "os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n",
    "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n",
    "\n",
    "# Load model\n",
    "try:\n",
    "    model = joblib.load(\"pose_model.pkl\")\n",
    "except Exception as e:\n",
    "    print(\"❌ Модель ачаалахад алдаа гарлаа:\", e)\n",
    "    exit(1)\n",
    "\n",
    "\n",
    "# MediaPipe\n",
    "mp_pose = mp.solutions.pose\n",
    "pose = mp_pose.Pose(static_image_mode=True)\n",
    "mp_drawing = mp.solutions.drawing_utils\n",
    "\n",
    "# Route - Upload Page\n",
    "@app.route(\"/\", methods=[\"GET\", \"POST\"])\n",
    "def upload_image():\n",
    "    if request.method == \"POST\":\n",
    "        file = request.files[\"image\"]\n",
    "        if file:\n",
    "            filename = secure_filename(file.filename)\n",
    "            filepath = os.path.join(app.config[\"UPLOAD_FOLDER\"], filename)\n",
    "            file.save(filepath)\n",
    "\n",
    "            result_path = analyze_pose(filepath)\n",
    "            return send_file(result_path, mimetype='image/jpeg')\n",
    "\n",
    "    return render_template(\"index.html\")\n",
    "\n",
    "# Pose анализ хийх функц\n",
    "def analyze_pose(image_path):\n",
    "    image = cv2.imread(image_path)\n",
    "    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n",
    "    results = pose.process(image_rgb)\n",
    "\n",
    "    if results.pose_landmarks:\n",
    "        landmarks = results.pose_landmarks.landmark\n",
    "        features = []\n",
    "        for lm in landmarks:\n",
    "            features.extend([lm.x, lm.y, lm.z, lm.visibility])\n",
    "\n",
    "        features = np.array(features).reshape(1, -1)\n",
    "        prediction = model.predict(features)[0]\n",
    "        probas = model.predict_proba(features)[0]\n",
    "        max_prob = np.max(probas)\n",
    "\n",
    "        # Зураг дээр үр дүн бичих\n",
    "        text = f'Pose: {prediction} ({max_prob * 100:.1f}%)'\n",
    "        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)\n",
    "        cv2.rectangle(image, (10, 10), (500, 60), (0, 0, 0), -1)\n",
    "        cv2.putText(image, text, (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)\n",
    "\n",
    "    else:\n",
    "        cv2.putText(image, \"⚠️ Pose not detected\", (30, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n",
    "\n",
    "    # Save result\n",
    "    result_path = os.path.join(UPLOAD_FOLDER, \"result.jpg\")\n",
    "    cv2.imwrite(result_path, image)\n",
    "    return result_path\n",
    "\n",
    "# Run server\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug=True,port=5050, use_reloader=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d6eea86",
   "metadata": {},
   "outputs": [],
   "source": [
    "%tb\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
